window.channelizeUI = {
  render: function(options = {}) {
    if (!options.settings || !options.settings.hasOwnProperty('layout')) {
      return;
    }
    switch(options.settings.layout) {
      case 'full':
        this._renderFullView(options);
        break;
      case 'docked':
        this._renderDockedView(options);
        break;
    }
  },
  _renderFullView: function(options) {
    this._loadCssFile('https://fonts.googleapis.com/icon?family=Material+Icons');
    this._loadCssFile('https://cdn.channelize.io/apps/react-ui-kit/2.0.0/fullViewLayout.channelize.css');

    let jsFileUrls = [
      'https://cdn.channelize.io/calls/sdk/4.0.1/browser.js',
      'https://cdn.channelize.io/apps/react-ui-kit/2.0.0/fullViewLayout.channelize.js'
    ];
    let requests = jsFileUrls.map(url => this._loadJsFile(url));
    Promise.all(requests)
      .then((res) => {
        window.channelizeApp.renderFullView(options)
      });
  },
  _renderDockedView: function(options) {
    this._loadCssFile('https://fonts.googleapis.com/icon?family=Material+Icons');
    this._loadCssFile('https://cdn.channelize.io/apps/react-ui-kit/2.0.0/dockedViewLayout.channelize.css');

    let jsFileUrls = [
      'https://cdn.channelize.io/apps/react-ui-kit/2.0.0/dockedViewLayout.channelize.js'
    ];
    let requests = jsFileUrls.map(url => this._loadJsFile(url));
    Promise.all(requests)
      .then((res) => {
        window.channelizeApp.renderDockedView(options)
      });
  },
  _loadCssFile: function(fileName) {
    var element = document.createElement("link");
    element.type = 'text/css';
    element.rel = 'stylesheet';
    element.href = fileName;
    document.getElementsByTagName("head")[0].appendChild(element);
    return element;
  },
  _loadJsFile: function(fileName) {
    var element = document.createElement("script");
    element.type = 'text/javascript';
    element.src = fileName;
    document.getElementsByTagName("head")[0].appendChild(element);

    return new Promise((resolve, reject) => {
      if (element.readyState) { //IE
        element.onreadystatechange = () => {
          if (element.readyState == "loaded" || element.readyState == "complete") {
            element.onreadystatechange = null;
            resolve(element);
          }
        };
      } else { //Other
        element.onload = () => {
          resolve(element);
        };
      }
    });
  }
}